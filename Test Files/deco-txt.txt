final project - description final project description project goal: the goal is to create a tool for cybersecurity operations, analysis, or security awareness training. cybersecurity professionals should be able to use this tool, and as such, must be fully professional, with appropriate help screens. if mirroring a tool that already exists, you must add some significant value to some portion of the tool. you can use c, c++, java, python, ruby, bash, powershell, etc. or any other languages should be documented and then approved in your proposal. this tool must be specifically developed for this course, and submitting a project used for other courses is considered plagiarism. the tool must have significant novel contributions that differentiate it from any other existing tool. submitting somebody else's work or submitting a project with minor modifications to an existing code is not acceptable as a final project. tool operations: the tool must work on either (or at least) kali linux 2020.2 or higher or windows 10 or higher. it must have a setup file that requires only a single command or double click. all required libraries or dependencies must be included in the installation folder (not requiring an internet connection). it may be a command-line interface tool or a graphical tool. if a command-line tool, you should document the switches in a standard way (like –help or -? etc.) both source code and executable object code must be submitted. it may be a front end to an existing tool but it must add something valuable to the operations. you may use hardware like raspberry pi, but forewarning: hardware often depends on drivers, which are not always available on all mobile platforms. if you are trying to capture wireless data, you must have a network card that can be put in “promiscuous” mode. if you put in a full effort and have a roadblock like a network card or a configuration that is “broken” by patches, of a website that stops letting you scrape it, etc., all is not lost! turn your presentation into a detailed lesson learned…sometimes failure after a lot of effort is worth more than success. refer to the [*] choosing potential final project topic: start here for some project directions and ideas. what you need to deliver: first, a proposal: your proposal must describe the goal of the project, the gap that it addresses, specifications (programming language, os, other parameters), milestones, and timelines. it should also provide a basic "storyboard" of at least one use case. (python, ruby, c++, c, java, bash script, web server, mysql database…others require approval). use this template download this templatefor your proposal. for the final project submission, you need to deliver the following items: video: you must take a 5-minute video demonstrating cool parts of your project working, demonstrating menus and help etc. upload to youtube or any other video platform for viewing. add the link to your readme.txt and also submit it using the given submission link on canvas. just an amateur phone video is probably ok if you can see the product. readme.txt: you will have a readme.txt file that clearly gives a program description, setup directions, usage, and appropriate examples. also, document major components/ideas from other sources' e.g, this project extends the existing nmap code (found at yyyy), or the primary idea for this tool comes from the zzz project. screenshots.pdf: you will have a .pdf formatted file with screenshots of your major program components your own work: this tool must be specifically developed for this course, and submitting a project used for other courses is considered plagiarism. the tool must have significant novel contributions that differentiate it from any other existing tool. submitting somebody else's work or submitting a project with minor modifications to an existing code is not acceptable as a final project. while you can certainly take ideas from books, online sources, or existing tools, you must document any component that uses more than two consecutive lines of code or commenting/documentation from someone/something else (other than included libraries). documents where you got it from in both code comments and major components in the readme.txt (and inline comments if applicable). grading rubric (100 points): final project proposal - must be submitted by the designated deadline - separate submission link proposal: 10 points final project submission - submit everything except proposal and video using this submission link presentation video: 10 points - separate submission link. program operations (does it work as expected): 40 points non-functional or dysfunctional code could impact other grading items like cybersecurity value. professional program (look and usage): 10 points cybersecurity value: 10 points documentation: 10 points ease of installation/setup (or enough directions to repeat setup): 10 points